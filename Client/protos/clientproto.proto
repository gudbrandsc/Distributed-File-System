syntax = "proto3";

//protoc -I=protos/ --java_out=src/main/java/ protos/chatproto.proto


//Message that the storage node gets from client.
message SNReceive {
    FileData fileData = 1;
    packetType type = 2;
    bool fileExist = 3;
    bool sendBroadCast = 4;
    repeated string node_files = 5;
    bool success = 6;

    enum packetType {
        STORE = 0;
        RETRIEVE = 1;
        SYSTEM = 2;
        BROADCAST = 3;
        PIPELINE = 4;
    }
}


// Message type the storage node reply with
message SNSend {
    FileData fileData = 1;
    packetType type = 2;
    repeated string node_files = 3;

    enum packetType {
        STORE = 0;
        RETRIEVE = 1;
        SYSTEM = 2;
    }
}

message FileData {
    bytes data = 1;
    int32 chunk_no = 2;
    int32 num_chunks = 3;
    string filename = 4;
    int32 replicaNum = 5;
}

message CordReceive {
    int32 avail_space = 1;
    int32 req_handled = 2;
    packetType type = 3;
    string ip = 4;
    int32 port = 5;

    enum packetType {
        JOIN = 0;
        SYSTEM = 1;
        HEARTBEAT = 2;
    }
}

message CordResponse {
    bool can_join = 1;
    int32 start_range = 2;
    int32 end_range = 3;
    int32 avail_space = 4;
    int32 req_handled = 5;
    repeated NodeInfo all_nodes = 6;
    int32 nodeId = 7;
    packetType type = 8;


    enum packetType {
        JOIN = 0;
        SYSTEM = 1;
        HEARTBEAT = 2;
    }
}



// Message sent to cordinator from client to get system info.

// Reply from codinator to client.

// Reply from coordinator to storage node.

// Reply from coordinator to new storage node.

//





message ClientReceiveData {
    FileData fileData = 1;
    int32 port = 2;
    string ip = 3;
    repeated NodeInfo node_info = 4;
    int32 avail_space = 5;
    repeated string node_files = 6;
    packetType type = 7;


    enum packetType {
        DATA = 0;
        REDIRECT = 1;
    }
}

message coordinatorMessage {
    //Add data for the storage node to do something with the ring
    enum packetType {
        NEWNODE = 0;
        CLIENTREQUEST = 1;
    }
}

message NodeInfo{
    int32 id = 1;
    string ip = 3;
    int32 port = 4;
    BInteger position = 5;
    int32 neighbor = 6;

}

message BInteger {
    bytes position = 1;
}
